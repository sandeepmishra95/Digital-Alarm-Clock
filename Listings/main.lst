C51 COMPILER V9.54   MAIN                                                                  12/20/2015 20:35:45 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<at89x51.h>
   2          #include"lcd.h"
   3          #include"delay.h"
   4          
   5          /*Defines*/
   6          #define ok P2_0
   7          #define up P2_1
   8          #define buzzer P2_3
   9          #define delay_time 50
  10          
  11          /*Gloabal Variables*/
  12          char c_hour=0x12,c_min=0x00,sec=0x00,clock_am_pm=0,timer=0;/*AM=0,PM=1*/
  13          char a_hour=0x12,a_min=0x00,alarm_am_pm=0,op=0x0;
  14          
  15          /*Function declaration*/
  16          void update_time(void);/*Update Time after each second*/
  17          void display_clock(void);/*Display Current time on LCD*/
  18          void set_time(void);/*Set current time*/
  19          void set_alarm(void);/*Set Alarm*/
  20          char key_pressed(void);/*Detect Key pressed*/
  21          void display_alarm(void);/*Display Alarm time on LCD*/
  22          
  23          /*ISR for timer0*/
  24          void timer0_isr(void) interrupt 1
  25          {
  26   1        timer++;
  27   1        if(timer==14)
  28   1        {
  29   2          timer=0;
  30   2          update_time();
  31   2        }
  32   1      
  33   1      }
  34          void main(void)
  35          {
  36   1        /*Timer initialisation*/
  37   1        TMOD = (TMOD & 0xF0) | 0x01;  /* Set T/C0 Mode */
  38   1        ET0 = 1;                      /* Enable Timer 0 Interrupts */
  39   1        TR0 = 0;                      /* Timer 0 off */
  40   1        EA = 1;                       /* Global Interrupt Enable */
  41   1      
  42   1        /*Buzzer initialisation*/
  43   1        buzzer=0;//output declared
  44   1      
  45   1        /*LCD Initialisation*/
  46   1        LCD_Init();
  47   1        LCD_GoToLineOne();
  48   1        LCD_Clear();
  49   1      
  50   1        /*Clock initialisation*/
  51   1        set_time();
  52   1        TR0 = 1;//Timer 0 on
  53   1        set_alarm();
  54   1      
C51 COMPILER V9.54   MAIN                                                                  12/20/2015 20:35:45 PAGE 2   

  55   1        /*Program body*/
  56   1        while(1)
  57   1        {
  58   2          LCD_GoToLineOne();
  59   2          LCD_DisplayString("Alarm-> ");
  60   2          display_alarm();
  61   2          LCD_GoToLineTwo();
  62   2          display_clock();
  63   2          if(key_pressed()=='o')
  64   2            set_alarm();
  65   2          if(c_hour==a_hour && c_min==a_min && clock_am_pm==alarm_am_pm)//If Alarm time=Clock Time
  66   2          {
  67   3            buzzer=1;
  68   3          }
  69   2          else
  70   2          {
  71   3            buzzer=0;
  72   3          }
  73   2        }
  74   1      }
  75          void update_time(void)
  76          {
  77   1        sec++;
  78   1        if((sec & 0x0F) > 0x09)//BCD correction
  79   1        {
  80   2          sec+=0x06;
  81   2        }
  82   1        if(sec>0x59)//sec counter reset
  83   1        {
  84   2          sec=0;
  85   2          c_min++;
  86   2        }
  87   1        if((c_min & 0x0F) > 0x09)//BCD correction
  88   1        {
  89   2          c_min+=0x06;
  90   2        }
  91   1        if(c_min>0x59)//c_min counter reset
  92   1        {
  93   2          c_min=0;
  94   2          c_hour++;
  95   2        }
  96   1        if((c_hour & 0x0F) > 0x09)//BCD correction
  97   1        {
  98   2          c_hour+=0x06;
  99   2        }
 100   1        if(c_hour>0x12)//c_hour counter reset and AM-PM correction
 101   1        {
 102   2          c_hour=0x01;
 103   2          clock_am_pm=!clock_am_pm;
 104   2        }
 105   1      }
 106          
 107          void display_clock(void)//displays Clock Time
 108          {
 109   1          LCD_DisplayRtcTime(c_hour,c_min,sec);
 110   1          if(clock_am_pm)
 111   1            LCD_DisplayString(" PM");
 112   1          else
 113   1            LCD_DisplayString(" AM");
 114   1      }
 115          void display_alarm(void)//displays alarm time
 116          {
C51 COMPILER V9.54   MAIN                                                                  12/20/2015 20:35:45 PAGE 3   

 117   1          LCD_DataWrite(((a_hour>>4) & 0x0f) + 0x30);
 118   1          LCD_DataWrite((a_hour & 0x0f) + 0x30);
 119   1          LCD_DataWrite(':');
 120   1      
 121   1          LCD_DataWrite(((a_min>>4) & 0x0f) + 0x30);
 122   1          LCD_DataWrite((a_min & 0x0f) + 0x30);
 123   1          if(alarm_am_pm)
 124   1            LCD_DisplayString(" PM");
 125   1          else
 126   1          LCD_DisplayString(" AM");
 127   1      }
 128          char key_pressed(void)//detects key pressed
 129          {
 130   1        if(ok==0)//pressed
 131   1        {
 132   2          delay_ms(delay_time);
 133   2          if(ok==0)//debounce checked
 134   2          {
 135   3            while(ok==0)
 136   3              ok=1;
 137   3            return 'o';
 138   3          }
 139   2        }
 140   1        if(up==0)//pressed
 141   1        {
 142   2          delay_ms(delay_time);
 143   2          if(up==0)////debounce checked
 144   2          {
 145   3            while(up==0)
 146   3              up=1;
 147   3            return 'u';
 148   3          }
 149   2        }
 150   1        else
 151   1          return 0x0;
 152   1      }
 153          
 154          void set_time(void)//set clock tiime
 155          {
 156   1        LCD_Clear();
 157   1        LCD_GoToLineOne();
 158   1        LCD_DisplayString("Set Clock Time");
 159   1        //for setting hours
 160   1        do
 161   1        {
 162   2          op=0x0;
 163   2          LCD_GoToLineTwo();
 164   2          display_clock();
 165   2          while(op==0x0)
 166   2          {
 167   3            op=key_pressed();
 168   3          }
 169   2          if(op=='u')//If up key is pressed
 170   2          {
 171   3            if(c_hour!=0x12)
 172   3              c_hour++;
 173   3            else
 174   3              c_hour=0x01;
 175   3            if((c_hour & 0x0F) > 0x09)//hour correction for BCD
 176   3            {
 177   4              c_hour+=0x06;
 178   4            }
C51 COMPILER V9.54   MAIN                                                                  12/20/2015 20:35:45 PAGE 4   

 179   3          }
 180   2        }while(op!='o');
 181   1      
 182   1        //for setting minutes
 183   1      do
 184   1        {
 185   2          op=0x0;
 186   2          LCD_GoToLineTwo();
 187   2          display_clock();
 188   2          while(op==0x0)
 189   2          {
 190   3            op=key_pressed();
 191   3          }
 192   2          if(op=='u')//If up key is pressed
 193   2          {
 194   3            if(c_min!=0x59)
 195   3              c_min++;
 196   3            else
 197   3              c_min=0x00;
 198   3            if((c_min & 0x0F) > 0x09)//hour correction for BCD
 199   3            {
 200   4              c_min+=0x06;
 201   4            }
 202   3          }
 203   2        }while(op!='o');
 204   1        // For setting AM-PM
 205   1        do
 206   1        {
 207   2          op=0x0;
 208   2          LCD_GoToLineTwo();
 209   2          display_clock();
 210   2          while(op==0x0)
 211   2          {
 212   3            op=key_pressed();
 213   3          }
 214   2          if(op!='o')
 215   2            clock_am_pm=!clock_am_pm;
 216   2        }while(op!='o');
 217   1      }
 218          
 219          void set_alarm(void)
 220          {
 221   1        LCD_Clear();
 222   1        LCD_GoToLineOne();
 223   1        LCD_DisplayString("Set Alarm Time");
 224   1        //for setting hours
 225   1        do
 226   1        {
 227   2          op=0x0;
 228   2          LCD_GoToLineTwo();
 229   2          display_alarm();
 230   2          while(op==0x0)
 231   2          {
 232   3            op=key_pressed();
 233   3          }
 234   2          if(op=='u')//If up key is pressed
 235   2          {
 236   3            if(a_hour!=0x12)
 237   3              a_hour++;
 238   3            else
 239   3              a_hour=0x01;
 240   3            if((a_hour & 0x0F) > 0x09)//hour correction for BCD
C51 COMPILER V9.54   MAIN                                                                  12/20/2015 20:35:45 PAGE 5   

 241   3            {
 242   4              a_hour+=0x06;
 243   4            }
 244   3          }
 245   2        }while(op!='o');
 246   1      
 247   1        //for setting minutes
 248   1        do
 249   1        {
 250   2          op=0x0;
 251   2          LCD_GoToLineTwo();
 252   2          display_alarm();
 253   2          while(op==0x0)
 254   2          {
 255   3            op=key_pressed();
 256   3          }
 257   2          if(op=='u')//If up key is pressed
 258   2          {
 259   3            if(a_min==0x59)
 260   3              a_min=0x00;
 261   3            else
 262   3              a_min++;
 263   3            if((a_min & 0x0F) > 0x09)//min correction for BCD
 264   3            {
 265   4              a_min+=0x06;
 266   4            }
 267   3          }
 268   2        }while(op!='o');
 269   1        // For setting AM/PM
 270   1        do
 271   1        {
 272   2          op=0x0;
 273   2          LCD_GoToLineTwo();
 274   2          display_alarm();
 275   2          while(op==0x0)
 276   2          {
 277   3            op=key_pressed();
 278   3          }
 279   2          if(op!='o')
 280   2            alarm_am_pm=!alarm_am_pm;
 281   2        }while(op!='o');
 282   1      }
*** WARNING C291 IN LINE 152 OF main.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    775    ----
   CONSTANT SIZE    =     47    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
